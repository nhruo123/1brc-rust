<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="279730"><g><title>rust-1brc.exe`core::f64::impl$0::max (9,033 samples, 3.23%)</title><rect x="48.4632%" y="229" width="3.2292%" height="15" fill="rgb(227,0,7)" fg:x="135566" fg:w="9033"/><text x="48.7132%" y="239.50">rus..</text></g><g><title>rust-1brc.exe`core::f64::impl$0::min (1,610 samples, 0.58%)</title><rect x="51.6923%" y="229" width="0.5756%" height="15" fill="rgb(217,0,24)" fg:x="144599" fg:w="1610"/><text x="51.9423%" y="239.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$0::index (10,617 samples, 3.80%)</title><rect x="52.2679%" y="229" width="3.7954%" height="15" fill="rgb(221,193,54)" fg:x="146209" fg:w="10617"/><text x="52.5179%" y="239.50">rust..</text></g><g><title>rust-1brc.exe`core::slice::index::impl$4::index (10,617 samples, 3.80%)</title><rect x="52.2679%" y="213" width="3.7954%" height="15" fill="rgb(248,212,6)" fg:x="146209" fg:w="10617"/><text x="52.5179%" y="223.50">rust..</text></g><g><title>rust-1brc.exe`core::slice::index::impl$4::get_unchecked (895 samples, 0.32%)</title><rect x="55.7434%" y="197" width="0.3200%" height="15" fill="rgb(208,68,35)" fg:x="155931" fg:w="895"/><text x="55.9934%" y="207.50"></text></g><g><title>rust-1brc.exe`core::ptr::const_ptr::impl$0::add (895 samples, 0.32%)</title><rect x="55.7434%" y="181" width="0.3200%" height="15" fill="rgb(232,128,0)" fg:x="155931" fg:w="895"/><text x="55.9934%" y="191.50"></text></g><g><title>rust-1brc.exe`rust_1brc::parse_fixed_point_number (51,089 samples, 18.26%)</title><rect x="56.0633%" y="229" width="18.2637%" height="15" fill="rgb(207,160,47)" fg:x="156826" fg:w="51089"/><text x="56.3133%" y="239.50">rust-1brc.exe`rust_1brc::par..</text></g><g><title>rust-1brc.exe`rust_1brc::convert_from_ascii (995 samples, 0.36%)</title><rect x="73.9713%" y="213" width="0.3557%" height="15" fill="rgb(228,23,34)" fg:x="206920" fg:w="995"/><text x="74.2213%" y="223.50"></text></g><g><title>rust-1brc.exe`core::num::impl$6::wrapping_sub (995 samples, 0.36%)</title><rect x="73.9713%" y="197" width="0.3557%" height="15" fill="rgb(218,30,26)" fg:x="206920" fg:w="995"/><text x="74.2213%" y="207.50"></text></g><g><title>rust-1brc.exe`core::array::impl$7::try_from (59 samples, 0.02%)</title><rect x="75.1396%" y="69" width="0.0211%" height="15" fill="rgb(220,122,19)" fg:x="210188" fg:w="59"/><text x="75.3896%" y="79.50"></text></g><g><title>rust-1brc.exe`core::result::Result::map (59 samples, 0.02%)</title><rect x="75.1396%" y="53" width="0.0211%" height="15" fill="rgb(250,228,42)" fg:x="210188" fg:w="59"/><text x="75.3896%" y="63.50"></text></g><g><title>rust-1brc.exe`core::convert::impl$6::try_into (1,944 samples, 0.69%)</title><rect x="75.1396%" y="85" width="0.6950%" height="15" fill="rgb(240,193,28)" fg:x="210188" fg:w="1944"/><text x="75.3896%" y="95.50"></text></g><g><title>rust-1brc.exe`core::num::impl$11::rotate_left (1,885 samples, 0.67%)</title><rect x="75.1607%" y="69" width="0.6739%" height="15" fill="rgb(216,20,37)" fg:x="210247" fg:w="1885"/><text x="75.4107%" y="79.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$0::index (69 samples, 0.02%)</title><rect x="75.8346%" y="85" width="0.0247%" height="15" fill="rgb(206,188,39)" fg:x="212132" fg:w="69"/><text x="76.0846%" y="95.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$6::index (69 samples, 0.02%)</title><rect x="75.8346%" y="69" width="0.0247%" height="15" fill="rgb(217,207,13)" fg:x="212132" fg:w="69"/><text x="76.0846%" y="79.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$6::get_unchecked (69 samples, 0.02%)</title><rect x="75.8346%" y="53" width="0.0247%" height="15" fill="rgb(231,73,38)" fg:x="212132" fg:w="69"/><text x="76.0846%" y="63.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$4::get_unchecked (69 samples, 0.02%)</title><rect x="75.8346%" y="37" width="0.0247%" height="15" fill="rgb(225,20,46)" fg:x="212132" fg:w="69"/><text x="76.0846%" y="47.50"></text></g><g><title>rust-1brc.exe`rustc_hash::impl$2::write (5,020 samples, 1.79%)</title><rect x="74.3270%" y="101" width="1.7946%" height="15" fill="rgb(210,31,41)" fg:x="207915" fg:w="5020"/><text x="74.5770%" y="111.50">r..</text></g><g><title>rust-1brc.exe`rustc_hash::FxHasher::add_to_hash (734 samples, 0.26%)</title><rect x="75.8592%" y="85" width="0.2624%" height="15" fill="rgb(221,200,47)" fg:x="212201" fg:w="734"/><text x="76.1092%" y="95.50"></text></g><g><title>rust-1brc.exe`core::num::impl$11::rotate_left (734 samples, 0.26%)</title><rect x="75.8592%" y="69" width="0.2624%" height="15" fill="rgb(226,26,5)" fg:x="212201" fg:w="734"/><text x="76.1092%" y="79.50"></text></g><g><title>rust-1brc.exe`hashbrown::map::make_hash (5,924 samples, 2.12%)</title><rect x="74.3270%" y="197" width="2.1178%" height="15" fill="rgb(249,33,26)" fg:x="207915" fg:w="5924"/><text x="74.5770%" y="207.50">r..</text></g><g><title>rust-1brc.exe`core::hash::BuildHasher::hash_one (5,924 samples, 2.12%)</title><rect x="74.3270%" y="181" width="2.1178%" height="15" fill="rgb(235,183,28)" fg:x="207915" fg:w="5924"/><text x="74.5770%" y="191.50">r..</text></g><g><title>rust-1brc.exe`core::hash::impls::impl$5::hash (5,924 samples, 2.12%)</title><rect x="74.3270%" y="165" width="2.1178%" height="15" fill="rgb(221,5,38)" fg:x="207915" fg:w="5924"/><text x="74.5770%" y="175.50">r..</text></g><g><title>rust-1brc.exe`core::hash::impls::impl$5::hash (5,924 samples, 2.12%)</title><rect x="74.3270%" y="149" width="2.1178%" height="15" fill="rgb(247,18,42)" fg:x="207915" fg:w="5924"/><text x="74.5770%" y="159.50">r..</text></g><g><title>rust-1brc.exe`core::hash::impls::impl$2::hash (5,924 samples, 2.12%)</title><rect x="74.3270%" y="133" width="2.1178%" height="15" fill="rgb(241,131,45)" fg:x="207915" fg:w="5924"/><text x="74.5770%" y="143.50">r..</text></g><g><title>rust-1brc.exe`core::hash::Hasher::write_str (5,924 samples, 2.12%)</title><rect x="74.3270%" y="117" width="2.1178%" height="15" fill="rgb(249,31,29)" fg:x="207915" fg:w="5924"/><text x="74.5770%" y="127.50">r..</text></g><g><title>rust-1brc.exe`rustc_hash::impl$2::write_u8 (904 samples, 0.32%)</title><rect x="76.1216%" y="101" width="0.3232%" height="15" fill="rgb(225,111,53)" fg:x="212935" fg:w="904"/><text x="76.3716%" y="111.50"></text></g><g><title>rust-1brc.exe`rustc_hash::FxHasher::add_to_hash (904 samples, 0.32%)</title><rect x="76.1216%" y="85" width="0.3232%" height="15" fill="rgb(238,160,17)" fg:x="212935" fg:w="904"/><text x="76.3716%" y="95.50"></text></g><g><title>rust-1brc.exe`core::num::impl$11::rotate_left (904 samples, 0.32%)</title><rect x="76.1216%" y="69" width="0.3232%" height="15" fill="rgb(214,148,48)" fg:x="212935" fg:w="904"/><text x="76.3716%" y="79.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::ProbeSeq::move_next (28 samples, 0.01%)</title><rect x="76.9506%" y="165" width="0.0100%" height="15" fill="rgb(232,36,49)" fg:x="215254" fg:w="28"/><text x="77.2006%" y="175.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::bitmask::impl$3::next (625 samples, 0.22%)</title><rect x="76.9606%" y="165" width="0.2234%" height="15" fill="rgb(209,103,24)" fg:x="215282" fg:w="625"/><text x="77.2106%" y="175.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (625 samples, 0.22%)</title><rect x="76.9606%" y="149" width="0.2234%" height="15" fill="rgb(229,88,8)" fg:x="215282" fg:w="625"/><text x="77.2106%" y="159.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::h2 (2,909 samples, 1.04%)</title><rect x="77.1841%" y="165" width="1.0399%" height="15" fill="rgb(213,181,19)" fg:x="215907" fg:w="2909"/><text x="77.4341%" y="175.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::RawTable::bucket (1,789 samples, 0.64%)</title><rect x="81.8057%" y="149" width="0.6395%" height="15" fill="rgb(254,191,54)" fg:x="228835" fg:w="1789"/><text x="82.0557%" y="159.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::Bucket::from_base_index (1,789 samples, 0.64%)</title><rect x="81.8057%" y="133" width="0.6395%" height="15" fill="rgb(241,83,37)" fg:x="228835" fg:w="1789"/><text x="82.0557%" y="143.50"></text></g><g><title>rust-1brc.exe`core::ptr::mut_ptr::impl$0::sub (1,789 samples, 0.64%)</title><rect x="81.8057%" y="117" width="0.6395%" height="15" fill="rgb(233,36,39)" fg:x="228835" fg:w="1789"/><text x="82.0557%" y="127.50"></text></g><g><title>rust-1brc.exe`core::ptr::mut_ptr::impl$0::offset (1,143 samples, 0.41%)</title><rect x="82.0366%" y="101" width="0.4086%" height="15" fill="rgb(226,3,54)" fg:x="229481" fg:w="1143"/><text x="82.2866%" y="111.50"></text></g><g><title>`0x7FFD6B171210 (30 samples, 0.01%)</title><rect x="83.4383%" y="53" width="0.0107%" height="15" fill="rgb(245,192,40)" fg:x="233402" fg:w="30"/><text x="83.6883%" y="63.50"></text></g><g><title>`0x7FFD6B171219 (960 samples, 0.34%)</title><rect x="83.4505%" y="53" width="0.3432%" height="15" fill="rgb(238,167,29)" fg:x="233436" fg:w="960"/><text x="83.7005%" y="63.50"></text></g><g><title>`0x7FFD6B17121E (39 samples, 0.01%)</title><rect x="83.7937%" y="53" width="0.0139%" height="15" fill="rgb(232,182,51)" fg:x="234396" fg:w="39"/><text x="84.0437%" y="63.50"></text></g><g><title>`0x7FFD6B171220 (1,029 samples, 0.37%)</title><rect x="83.8076%" y="53" width="0.3679%" height="15" fill="rgb(231,60,39)" fg:x="234435" fg:w="1029"/><text x="84.0576%" y="63.50"></text></g><g><title>`0x7FFD6B171222 (5,708 samples, 2.04%)</title><rect x="84.1755%" y="53" width="2.0405%" height="15" fill="rgb(208,69,12)" fg:x="235464" fg:w="5708"/><text x="84.4255%" y="63.50">`..</text></g><g><title>`0x7FFD6B171227 (1,831 samples, 0.65%)</title><rect x="86.2160%" y="53" width="0.6546%" height="15" fill="rgb(235,93,37)" fg:x="241172" fg:w="1831"/><text x="86.4660%" y="63.50"></text></g><g><title>`0x7FFD6B17122A (212 samples, 0.08%)</title><rect x="86.8706%" y="53" width="0.0758%" height="15" fill="rgb(213,116,39)" fg:x="243003" fg:w="212"/><text x="87.1206%" y="63.50"></text></g><g><title>`0x7FFD6B17122D (422 samples, 0.15%)</title><rect x="86.9463%" y="53" width="0.1509%" height="15" fill="rgb(222,207,29)" fg:x="243215" fg:w="422"/><text x="87.1963%" y="63.50"></text></g><g><title>`0x7FFD6B171232 (3,125 samples, 1.12%)</title><rect x="87.0972%" y="53" width="1.1171%" height="15" fill="rgb(206,96,30)" fg:x="243637" fg:w="3125"/><text x="87.3472%" y="63.50"></text></g><g><title>`0x7FFD6B171235 (651 samples, 0.23%)</title><rect x="88.2143%" y="53" width="0.2327%" height="15" fill="rgb(218,138,4)" fg:x="246762" fg:w="651"/><text x="88.4643%" y="63.50"></text></g><g><title>`0x7FFD6B171239 (3,962 samples, 1.42%)</title><rect x="88.4471%" y="53" width="1.4164%" height="15" fill="rgb(250,191,14)" fg:x="247413" fg:w="3962"/><text x="88.6971%" y="63.50"></text></g><g><title>`0x7FFD6B17123B (1,611 samples, 0.58%)</title><rect x="89.8634%" y="53" width="0.5759%" height="15" fill="rgb(239,60,40)" fg:x="251375" fg:w="1611"/><text x="90.1134%" y="63.50"></text></g><g><title>`0x7FFD6B171240 (1,860 samples, 0.66%)</title><rect x="90.4394%" y="53" width="0.6649%" height="15" fill="rgb(206,27,48)" fg:x="252986" fg:w="1860"/><text x="90.6894%" y="63.50"></text></g><g><title>`0x7FFD6B171242 (8,178 samples, 2.92%)</title><rect x="91.1043%" y="53" width="2.9235%" height="15" fill="rgb(225,35,8)" fg:x="254846" fg:w="8178"/><text x="91.3543%" y="63.50">`0..</text></g><g><title>`0x7FFD6B171247 (6,343 samples, 2.27%)</title><rect x="94.0278%" y="53" width="2.2675%" height="15" fill="rgb(250,213,24)" fg:x="263024" fg:w="6343"/><text x="94.2778%" y="63.50">`..</text></g><g><title>`0x7FFD6B17124A (477 samples, 0.17%)</title><rect x="96.2954%" y="53" width="0.1705%" height="15" fill="rgb(247,123,22)" fg:x="269367" fg:w="477"/><text x="96.5454%" y="63.50"></text></g><g><title>`0x7FFD6B17124F (241 samples, 0.09%)</title><rect x="96.4659%" y="53" width="0.0862%" height="15" fill="rgb(231,138,38)" fg:x="269844" fg:w="241"/><text x="96.7159%" y="63.50"></text></g><g><title>`0x7FFD6B171252 (59 samples, 0.02%)</title><rect x="96.5520%" y="53" width="0.0211%" height="15" fill="rgb(231,145,46)" fg:x="270085" fg:w="59"/><text x="96.8020%" y="63.50"></text></g><g><title>`0x7FFD6B17125A (264 samples, 0.09%)</title><rect x="96.5731%" y="53" width="0.0944%" height="15" fill="rgb(251,118,11)" fg:x="270144" fg:w="264"/><text x="96.8231%" y="63.50"></text></g><g><title>`0x7FFD6B17125E (67 samples, 0.02%)</title><rect x="96.6675%" y="53" width="0.0240%" height="15" fill="rgb(217,147,25)" fg:x="270408" fg:w="67"/><text x="96.9175%" y="63.50"></text></g><g><title>`0x7FFD6B171297 (341 samples, 0.12%)</title><rect x="96.6915%" y="53" width="0.1219%" height="15" fill="rgb(247,81,37)" fg:x="270475" fg:w="341"/><text x="96.9415%" y="63.50"></text></g><g><title>`0x7FFD6B17129E (178 samples, 0.06%)</title><rect x="96.8134%" y="53" width="0.0636%" height="15" fill="rgb(209,12,38)" fg:x="270816" fg:w="178"/><text x="97.0634%" y="63.50"></text></g><g><title>`0x7FFD6B1712A0 (285 samples, 0.10%)</title><rect x="96.8770%" y="53" width="0.1019%" height="15" fill="rgb(227,1,9)" fg:x="270994" fg:w="285"/><text x="97.1270%" y="63.50"></text></g><g><title>`0x7FFD6B1712A3 (624 samples, 0.22%)</title><rect x="96.9789%" y="53" width="0.2231%" height="15" fill="rgb(248,47,43)" fg:x="271279" fg:w="624"/><text x="97.2289%" y="63.50"></text></g><g><title>`0x7FFD6B1712A9 (712 samples, 0.25%)</title><rect x="97.2019%" y="53" width="0.2545%" height="15" fill="rgb(221,10,30)" fg:x="271903" fg:w="712"/><text x="97.4519%" y="63.50"></text></g><g><title>`0x7FFD6B1712B2 (28 samples, 0.01%)</title><rect x="97.4572%" y="53" width="0.0100%" height="15" fill="rgb(210,229,1)" fg:x="272617" fg:w="28"/><text x="97.7072%" y="63.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::impl$7::find::closure$0 (56,431 samples, 20.17%)</title><rect x="78.2240%" y="165" width="20.1734%" height="15" fill="rgb(222,148,37)" fg:x="218816" fg:w="56431"/><text x="78.4740%" y="175.50">rust-1brc.exe`hashbrown::raw::im..</text></g><g><title>rust-1brc.exe`hashbrown::rustc_entry::impl$0::rustc_entry::closure$0 (44,623 samples, 15.95%)</title><rect x="82.4452%" y="149" width="15.9522%" height="15" fill="rgb(234,67,33)" fg:x="230624" fg:w="44623"/><text x="82.6952%" y="159.50">rust-1brc.exe`hashbrown::..</text></g><g><title>rust-1brc.exe`core::cmp::impls::impl$9::eq (44,623 samples, 15.95%)</title><rect x="82.4452%" y="133" width="15.9522%" height="15" fill="rgb(247,98,35)" fg:x="230624" fg:w="44623"/><text x="82.6952%" y="143.50">rust-1brc.exe`core::cmp::..</text></g><g><title>rust-1brc.exe`core::str::traits::impl$1::eq (44,623 samples, 15.95%)</title><rect x="82.4452%" y="117" width="15.9522%" height="15" fill="rgb(247,138,52)" fg:x="230624" fg:w="44623"/><text x="82.6952%" y="127.50">rust-1brc.exe`core::str::..</text></g><g><title>rust-1brc.exe`core::cmp::impls::impl$9::eq (44,623 samples, 15.95%)</title><rect x="82.4452%" y="101" width="15.9522%" height="15" fill="rgb(213,79,30)" fg:x="230624" fg:w="44623"/><text x="82.6952%" y="111.50">rust-1brc.exe`core::cmp::..</text></g><g><title>rust-1brc.exe`core::slice::cmp::impl$0::eq (44,623 samples, 15.95%)</title><rect x="82.4452%" y="85" width="15.9522%" height="15" fill="rgb(246,177,23)" fg:x="230624" fg:w="44623"/><text x="82.6952%" y="95.50">rust-1brc.exe`core::slice..</text></g><g><title>rust-1brc.exe`core::slice::cmp::impl$5::equal (44,623 samples, 15.95%)</title><rect x="82.4452%" y="69" width="15.9522%" height="15" fill="rgb(230,62,27)" fg:x="230624" fg:w="44623"/><text x="82.6952%" y="79.50">rust-1brc.exe`core::slice..</text></g><g><title>rust-1brc.exe`memcmp (2,589 samples, 0.93%)</title><rect x="97.4718%" y="53" width="0.9255%" height="15" fill="rgb(216,154,8)" fg:x="272658" fg:w="2589"/><text x="97.7218%" y="63.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::load (625 samples, 0.22%)</title><rect x="98.3974%" y="165" width="0.2234%" height="15" fill="rgb(244,35,45)" fg:x="275247" fg:w="625"/><text x="98.6474%" y="175.50"></text></g><g><title>rust-1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (625 samples, 0.22%)</title><rect x="98.3974%" y="149" width="0.2234%" height="15" fill="rgb(251,115,12)" fg:x="275247" fg:w="625"/><text x="98.6474%" y="159.50"></text></g><g><title>rust-1brc.exe`core::intrinsics::copy_nonoverlapping (625 samples, 0.22%)</title><rect x="98.3974%" y="133" width="0.2234%" height="15" fill="rgb(240,54,50)" fg:x="275247" fg:w="625"/><text x="98.6474%" y="143.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::match_byte (1,255 samples, 0.45%)</title><rect x="98.6208%" y="165" width="0.4486%" height="15" fill="rgb(233,84,52)" fg:x="275872" fg:w="1255"/><text x="98.8708%" y="175.50"></text></g><g><title>rust-1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (1,255 samples, 0.45%)</title><rect x="98.6208%" y="149" width="0.4486%" height="15" fill="rgb(207,117,47)" fg:x="275872" fg:w="1255"/><text x="98.8708%" y="159.50"></text></g><g><title>rust-1brc.exe`std::collections::hash::map::HashMap::entry (69,298 samples, 24.77%)</title><rect x="74.3270%" y="229" width="24.7732%" height="15" fill="rgb(249,43,39)" fg:x="207915" fg:w="69298"/><text x="74.5770%" y="239.50">rust-1brc.exe`std::collections::hash::m..</text></g><g><title>rust-1brc.exe`hashbrown::map::HashMap::rustc_entry (69,298 samples, 24.77%)</title><rect x="74.3270%" y="213" width="24.7732%" height="15" fill="rgb(209,38,44)" fg:x="207915" fg:w="69298"/><text x="74.5770%" y="223.50">rust-1brc.exe`hashbrown::map::HashMap::..</text></g><g><title>rust-1brc.exe`hashbrown::raw::RawTable::find (63,374 samples, 22.66%)</title><rect x="76.4448%" y="197" width="22.6554%" height="15" fill="rgb(236,212,23)" fg:x="213839" fg:w="63374"/><text x="76.6948%" y="207.50">rust-1brc.exe`hashbrown::raw::RawTab..</text></g><g><title>rust-1brc.exe`hashbrown::raw::RawTableInner::find_inner (63,137 samples, 22.57%)</title><rect x="76.5295%" y="181" width="22.5707%" height="15" fill="rgb(242,79,21)" fg:x="214076" fg:w="63137"/><text x="76.7795%" y="191.50">rust-1brc.exe`hashbrown::raw::RawTab..</text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::match_empty (86 samples, 0.03%)</title><rect x="99.0695%" y="165" width="0.0307%" height="15" fill="rgb(211,96,35)" fg:x="277127" fg:w="86"/><text x="99.3195%" y="175.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::match_byte (86 samples, 0.03%)</title><rect x="99.0695%" y="149" width="0.0307%" height="15" fill="rgb(253,215,40)" fg:x="277127" fg:w="86"/><text x="99.3195%" y="159.50"></text></g><g><title>rust-1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (86 samples, 0.03%)</title><rect x="99.0695%" y="133" width="0.0307%" height="15" fill="rgb(211,81,21)" fg:x="277127" fg:w="86"/><text x="99.3195%" y="143.50"></text></g><g><title>rust-1brc.exe`std::collections::hash::map::OccupiedEntry::into_mut (2,500 samples, 0.89%)</title><rect x="99.1002%" y="229" width="0.8937%" height="15" fill="rgb(208,190,38)" fg:x="277213" fg:w="2500"/><text x="99.3502%" y="239.50"></text></g><g><title>rust-1brc.exe`hashbrown::rustc_entry::RustcOccupiedEntry::into_mut (2,500 samples, 0.89%)</title><rect x="99.1002%" y="213" width="0.8937%" height="15" fill="rgb(235,213,38)" fg:x="277213" fg:w="2500"/><text x="99.3502%" y="223.50"></text></g><g><title>rust-1brc.exe`rust_1brc::compute (279,701 samples, 99.99%)</title><rect x="0.0046%" y="245" width="99.9896%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="279701"/><text x="0.2546%" y="255.50">rust-1brc.exe`rust_1brc::compute</text></g><g><title>`0x7FFD8C86AA58 (279,714 samples, 99.99%)</title><rect x="0.0004%" y="357" width="99.9943%" height="15" fill="rgb(244,218,35)" fg:x="1" fg:w="279714"/><text x="0.2504%" y="367.50">`0x7FFD8C86AA58</text></g><g><title>`0x7FFD8AD2257D (279,714 samples, 99.99%)</title><rect x="0.0004%" y="341" width="99.9943%" height="15" fill="rgb(240,68,47)" fg:x="1" fg:w="279714"/><text x="0.2504%" y="351.50">`0x7FFD8AD2257D</text></g><g><title>rust-1brc.exe`__scrt_common_main_seh() (279,711 samples, 99.99%)</title><rect x="0.0014%" y="325" width="99.9932%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="279711"/><text x="0.2514%" y="335.50">rust-1brc.exe`__scrt_common_main_seh()</text></g><g><title>rust-1brc.exe`invoke_main() (279,706 samples, 99.99%)</title><rect x="0.0032%" y="309" width="99.9914%" height="15" fill="rgb(235,124,12)" fg:x="9" fg:w="279706"/><text x="0.2532%" y="319.50">rust-1brc.exe`invoke_main()</text></g><g><title>rust-1brc.exe`main (279,706 samples, 99.99%)</title><rect x="0.0032%" y="293" width="99.9914%" height="15" fill="rgb(224,169,11)" fg:x="9" fg:w="279706"/><text x="0.2532%" y="303.50">rust-1brc.exe`main</text></g><g><title>rust-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt; (279,706 samples, 99.99%)</title><rect x="0.0032%" y="277" width="99.9914%" height="15" fill="rgb(250,166,2)" fg:x="9" fg:w="279706"/><text x="0.2532%" y="287.50">rust-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;</text></g><g><title>rust-1brc.exe`rust_1brc::main (279,706 samples, 99.99%)</title><rect x="0.0032%" y="261" width="99.9914%" height="15" fill="rgb(242,216,29)" fg:x="9" fg:w="279706"/><text x="0.2532%" y="271.50">rust-1brc.exe`rust_1brc::main</text></g><g><title>all (279,730 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="279730"/><text x="0.2500%" y="383.50"></text></g></svg></svg>