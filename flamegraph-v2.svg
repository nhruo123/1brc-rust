<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="323642"><g><title>rust-1brc.exe`core::f64::impl$0::max (9,627 samples, 2.97%)</title><rect x="31.8151%" y="229" width="2.9746%" height="15" fill="rgb(227,0,7)" fg:x="102967" fg:w="9627"/><text x="32.0651%" y="239.50">rus..</text></g><g><title>rust-1brc.exe`core::f64::impl$0::min (1,893 samples, 0.58%)</title><rect x="34.7897%" y="229" width="0.5849%" height="15" fill="rgb(217,0,24)" fg:x="112594" fg:w="1893"/><text x="35.0397%" y="239.50"></text></g><g><title>rust-1brc.exe`core::num::dec2flt::float::impl$1::from_u64 (10,978 samples, 3.39%)</title><rect x="49.8236%" y="165" width="3.3920%" height="15" fill="rgb(221,193,54)" fg:x="161250" fg:w="10978"/><text x="50.0736%" y="175.50">rus..</text></g><g><title>rust-1brc.exe`core::num::dec2flt::float::impl$1::pow10_fast_path (1,828 samples, 0.56%)</title><rect x="53.2156%" y="165" width="0.5648%" height="15" fill="rgb(248,212,6)" fg:x="172228" fg:w="1828"/><text x="53.4656%" y="175.50"></text></g><g><title>rust-1brc.exe`core::num::dec2flt::number::Number::try_fast_path (24,177 samples, 7.47%)</title><rect x="46.9686%" y="181" width="7.4703%" height="15" fill="rgb(208,68,35)" fg:x="152010" fg:w="24177"/><text x="47.2186%" y="191.50">rust-1brc...</text></g><g><title>rust-1brc.exe`core::num::dec2flt::number::Number::is_fast_path (2,131 samples, 0.66%)</title><rect x="53.7804%" y="165" width="0.6584%" height="15" fill="rgb(232,128,0)" fg:x="174056" fg:w="2131"/><text x="54.0304%" y="175.50"></text></g><g><title>rust-1brc.exe`core::num::dec2flt::common::impl$0::offset_from (1,113 samples, 0.34%)</title><rect x="55.5410%" y="149" width="0.3439%" height="15" fill="rgb(207,160,47)" fg:x="179754" fg:w="1113"/><text x="55.7910%" y="159.50"></text></g><g><title>rust-1brc.exe`core::num::dec2flt::parse::try_parse_digits::closure$0 (3,531 samples, 1.09%)</title><rect x="60.5499%" y="117" width="1.0910%" height="15" fill="rgb(228,23,34)" fg:x="195965" fg:w="3531"/><text x="60.7999%" y="127.50"></text></g><g><title>rust-1brc.exe`core::num::impl$9::wrapping_mul (2,146 samples, 0.66%)</title><rect x="60.9779%" y="101" width="0.6631%" height="15" fill="rgb(218,30,26)" fg:x="197350" fg:w="2146"/><text x="61.2279%" y="111.50"></text></g><g><title>rust-1brc.exe`core::num::dec2flt::parse::try_parse_digits (21,521 samples, 6.65%)</title><rect x="55.8849%" y="149" width="6.6496%" height="15" fill="rgb(220,122,19)" fg:x="180867" fg:w="21521"/><text x="56.1349%" y="159.50">rust-1brc..</text></g><g><title>rust-1brc.exe`core::num::dec2flt::common::impl$0::parse_digits (18,828 samples, 5.82%)</title><rect x="56.7170%" y="133" width="5.8175%" height="15" fill="rgb(250,228,42)" fg:x="183560" fg:w="18828"/><text x="56.9670%" y="143.50">rust-1b..</text></g><g><title>rust-1brc.exe`core::num::impl$6::wrapping_sub (2,892 samples, 0.89%)</title><rect x="61.6409%" y="117" width="0.8936%" height="15" fill="rgb(240,193,28)" fg:x="199496" fg:w="2892"/><text x="61.8909%" y="127.50"></text></g><g><title>rust-1brc.exe`core::num::dec2flt::parse::parse_number (28,022 samples, 8.66%)</title><rect x="54.4389%" y="181" width="8.6583%" height="15" fill="rgb(216,20,37)" fg:x="176187" fg:w="28022"/><text x="54.6889%" y="191.50">rust-1brc.ex..</text></g><g><title>rust-1brc.exe`core::num::dec2flt::parse::parse_partial_number (27,968 samples, 8.64%)</title><rect x="54.4555%" y="165" width="8.6416%" height="15" fill="rgb(206,188,39)" fg:x="176241" fg:w="27968"/><text x="54.7055%" y="175.50">rust-1brc.ex..</text></g><g><title>rust-1brc.exe`core::slice::impl$0::split_first (1,821 samples, 0.56%)</title><rect x="62.5345%" y="149" width="0.5627%" height="15" fill="rgb(217,207,13)" fg:x="202388" fg:w="1821"/><text x="62.7845%" y="159.50"></text></g><g><title>rust-1brc.exe`core::result::Result::unwrap (89,721 samples, 27.72%)</title><rect x="35.3755%" y="229" width="27.7223%" height="15" fill="rgb(231,73,38)" fg:x="114490" fg:w="89721"/><text x="35.6255%" y="239.50">rust-1brc.exe`core::result::Result::unwrap</text></g><g><title>rust-1brc.exe`core::num::dec2flt::impl$3::from_str (89,714 samples, 27.72%)</title><rect x="35.3777%" y="213" width="27.7201%" height="15" fill="rgb(225,20,46)" fg:x="114497" fg:w="89714"/><text x="35.6277%" y="223.50">rust-1brc.exe`core::num::dec2flt::impl$3::fr..</text></g><g><title>rust-1brc.exe`core::num::dec2flt::dec2flt (81,812 samples, 25.28%)</title><rect x="37.8193%" y="197" width="25.2785%" height="15" fill="rgb(210,31,41)" fg:x="122399" fg:w="81812"/><text x="38.0693%" y="207.50">rust-1brc.exe`core::num::dec2flt::dec2flt</text></g><g><title>rust-1brc.exe`core::slice::index::impl$0::index (9,587 samples, 2.96%)</title><rect x="63.0978%" y="229" width="2.9622%" height="15" fill="rgb(221,200,47)" fg:x="204211" fg:w="9587"/><text x="63.3478%" y="239.50">rus..</text></g><g><title>rust-1brc.exe`core::slice::index::impl$4::index (9,587 samples, 2.96%)</title><rect x="63.0978%" y="213" width="2.9622%" height="15" fill="rgb(226,26,5)" fg:x="204211" fg:w="9587"/><text x="63.3478%" y="223.50">rus..</text></g><g><title>rust-1brc.exe`core::slice::index::impl$4::get_unchecked (1,048 samples, 0.32%)</title><rect x="65.7362%" y="197" width="0.3238%" height="15" fill="rgb(249,33,26)" fg:x="212750" fg:w="1048"/><text x="65.9862%" y="207.50"></text></g><g><title>rust-1brc.exe`core::ptr::const_ptr::impl$0::add (1,048 samples, 0.32%)</title><rect x="65.7362%" y="181" width="0.3238%" height="15" fill="rgb(235,183,28)" fg:x="212750" fg:w="1048"/><text x="65.9862%" y="191.50"></text></g><g><title>rust-1brc.exe`core::str::impl$0::parse (764 samples, 0.24%)</title><rect x="66.0600%" y="229" width="0.2361%" height="15" fill="rgb(221,5,38)" fg:x="213798" fg:w="764"/><text x="66.3100%" y="239.50"></text></g><g><title>rust-1brc.exe`core::array::impl$7::try_from (183 samples, 0.06%)</title><rect x="67.2851%" y="69" width="0.0565%" height="15" fill="rgb(247,18,42)" fg:x="217763" fg:w="183"/><text x="67.5351%" y="79.50"></text></g><g><title>rust-1brc.exe`core::result::Result::map (183 samples, 0.06%)</title><rect x="67.2851%" y="53" width="0.0565%" height="15" fill="rgb(241,131,45)" fg:x="217763" fg:w="183"/><text x="67.5351%" y="63.50"></text></g><g><title>rust-1brc.exe`core::convert::impl$6::try_into (2,367 samples, 0.73%)</title><rect x="67.2851%" y="85" width="0.7314%" height="15" fill="rgb(249,31,29)" fg:x="217763" fg:w="2367"/><text x="67.5351%" y="95.50"></text></g><g><title>rust-1brc.exe`core::num::impl$11::rotate_left (2,184 samples, 0.67%)</title><rect x="67.3417%" y="69" width="0.6748%" height="15" fill="rgb(225,111,53)" fg:x="217946" fg:w="2184"/><text x="67.5917%" y="79.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$0::index (279 samples, 0.09%)</title><rect x="68.0165%" y="85" width="0.0862%" height="15" fill="rgb(238,160,17)" fg:x="220130" fg:w="279"/><text x="68.2665%" y="95.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$6::index (279 samples, 0.09%)</title><rect x="68.0165%" y="69" width="0.0862%" height="15" fill="rgb(214,148,48)" fg:x="220130" fg:w="279"/><text x="68.2665%" y="79.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$6::get_unchecked (279 samples, 0.09%)</title><rect x="68.0165%" y="53" width="0.0862%" height="15" fill="rgb(232,36,49)" fg:x="220130" fg:w="279"/><text x="68.2665%" y="63.50"></text></g><g><title>rust-1brc.exe`core::slice::index::impl$4::get_unchecked (279 samples, 0.09%)</title><rect x="68.0165%" y="37" width="0.0862%" height="15" fill="rgb(209,103,24)" fg:x="220130" fg:w="279"/><text x="68.2665%" y="47.50"></text></g><g><title>rust-1brc.exe`rustc_hash::impl$2::write (7,614 samples, 2.35%)</title><rect x="66.2964%" y="101" width="2.3526%" height="15" fill="rgb(229,88,8)" fg:x="214563" fg:w="7614"/><text x="66.5464%" y="111.50">r..</text></g><g><title>rust-1brc.exe`rustc_hash::FxHasher::add_to_hash (1,768 samples, 0.55%)</title><rect x="68.1027%" y="85" width="0.5463%" height="15" fill="rgb(213,181,19)" fg:x="220409" fg:w="1768"/><text x="68.3527%" y="95.50"></text></g><g><title>rust-1brc.exe`core::num::impl$11::rotate_left (1,768 samples, 0.55%)</title><rect x="68.1027%" y="69" width="0.5463%" height="15" fill="rgb(254,191,54)" fg:x="220409" fg:w="1768"/><text x="68.3527%" y="79.50"></text></g><g><title>rust-1brc.exe`hashbrown::map::make_hash (9,121 samples, 2.82%)</title><rect x="66.2964%" y="197" width="2.8182%" height="15" fill="rgb(241,83,37)" fg:x="214563" fg:w="9121"/><text x="66.5464%" y="207.50">ru..</text></g><g><title>rust-1brc.exe`core::hash::BuildHasher::hash_one (9,121 samples, 2.82%)</title><rect x="66.2964%" y="181" width="2.8182%" height="15" fill="rgb(233,36,39)" fg:x="214563" fg:w="9121"/><text x="66.5464%" y="191.50">ru..</text></g><g><title>rust-1brc.exe`core::hash::impls::impl$5::hash (9,121 samples, 2.82%)</title><rect x="66.2964%" y="165" width="2.8182%" height="15" fill="rgb(226,3,54)" fg:x="214563" fg:w="9121"/><text x="66.5464%" y="175.50">ru..</text></g><g><title>rust-1brc.exe`core::hash::impls::impl$5::hash (9,121 samples, 2.82%)</title><rect x="66.2964%" y="149" width="2.8182%" height="15" fill="rgb(245,192,40)" fg:x="214563" fg:w="9121"/><text x="66.5464%" y="159.50">ru..</text></g><g><title>rust-1brc.exe`core::hash::impls::impl$2::hash (9,121 samples, 2.82%)</title><rect x="66.2964%" y="133" width="2.8182%" height="15" fill="rgb(238,167,29)" fg:x="214563" fg:w="9121"/><text x="66.5464%" y="143.50">ru..</text></g><g><title>rust-1brc.exe`core::hash::Hasher::write_str (9,121 samples, 2.82%)</title><rect x="66.2964%" y="117" width="2.8182%" height="15" fill="rgb(232,182,51)" fg:x="214563" fg:w="9121"/><text x="66.5464%" y="127.50">ru..</text></g><g><title>rust-1brc.exe`rustc_hash::impl$2::write_u8 (1,507 samples, 0.47%)</title><rect x="68.6490%" y="101" width="0.4656%" height="15" fill="rgb(231,60,39)" fg:x="222177" fg:w="1507"/><text x="68.8990%" y="111.50"></text></g><g><title>rust-1brc.exe`rustc_hash::FxHasher::add_to_hash (1,507 samples, 0.47%)</title><rect x="68.6490%" y="85" width="0.4656%" height="15" fill="rgb(208,69,12)" fg:x="222177" fg:w="1507"/><text x="68.8990%" y="95.50"></text></g><g><title>rust-1brc.exe`core::num::impl$11::rotate_left (1,507 samples, 0.47%)</title><rect x="68.6490%" y="69" width="0.4656%" height="15" fill="rgb(235,93,37)" fg:x="222177" fg:w="1507"/><text x="68.8990%" y="79.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::bitmask::impl$3::next (650 samples, 0.20%)</title><rect x="70.9753%" y="165" width="0.2008%" height="15" fill="rgb(213,116,39)" fg:x="229706" fg:w="650"/><text x="71.2253%" y="175.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::bitmask::BitMask::lowest_set_bit (650 samples, 0.20%)</title><rect x="70.9753%" y="149" width="0.2008%" height="15" fill="rgb(222,207,29)" fg:x="229706" fg:w="650"/><text x="71.2253%" y="159.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::h2 (7,887 samples, 2.44%)</title><rect x="71.1762%" y="165" width="2.4370%" height="15" fill="rgb(206,96,30)" fg:x="230356" fg:w="7887"/><text x="71.4262%" y="175.50">ru..</text></g><g><title>rust-1brc.exe`hashbrown::raw::RawTable::bucket (7,395 samples, 2.28%)</title><rect x="79.0559%" y="149" width="2.2849%" height="15" fill="rgb(218,138,4)" fg:x="255858" fg:w="7395"/><text x="79.3059%" y="159.50">r..</text></g><g><title>rust-1brc.exe`hashbrown::raw::Bucket::from_base_index (7,395 samples, 2.28%)</title><rect x="79.0559%" y="133" width="2.2849%" height="15" fill="rgb(250,191,14)" fg:x="255858" fg:w="7395"/><text x="79.3059%" y="143.50">r..</text></g><g><title>rust-1brc.exe`core::ptr::mut_ptr::impl$0::sub (7,395 samples, 2.28%)</title><rect x="79.0559%" y="117" width="2.2849%" height="15" fill="rgb(239,60,40)" fg:x="255858" fg:w="7395"/><text x="79.3059%" y="127.50">r..</text></g><g><title>rust-1brc.exe`core::ptr::mut_ptr::impl$0::offset (5,587 samples, 1.73%)</title><rect x="79.6145%" y="101" width="1.7263%" height="15" fill="rgb(206,27,48)" fg:x="257666" fg:w="5587"/><text x="79.8645%" y="111.50"></text></g><g><title>`0x7FFD6B171210 (42 samples, 0.01%)</title><rect x="82.1386%" y="53" width="0.0130%" height="15" fill="rgb(225,35,8)" fg:x="265835" fg:w="42"/><text x="82.3886%" y="63.50"></text></g><g><title>`0x7FFD6B171219 (1,406 samples, 0.43%)</title><rect x="82.1525%" y="53" width="0.4344%" height="15" fill="rgb(250,213,24)" fg:x="265880" fg:w="1406"/><text x="82.4025%" y="63.50"></text></g><g><title>`0x7FFD6B17121E (75 samples, 0.02%)</title><rect x="82.5869%" y="53" width="0.0232%" height="15" fill="rgb(247,123,22)" fg:x="267286" fg:w="75"/><text x="82.8369%" y="63.50"></text></g><g><title>`0x7FFD6B171220 (1,222 samples, 0.38%)</title><rect x="82.6101%" y="53" width="0.3776%" height="15" fill="rgb(231,138,38)" fg:x="267361" fg:w="1222"/><text x="82.8601%" y="63.50"></text></g><g><title>`0x7FFD6B171222 (7,501 samples, 2.32%)</title><rect x="82.9877%" y="53" width="2.3177%" height="15" fill="rgb(231,145,46)" fg:x="268583" fg:w="7501"/><text x="83.2377%" y="63.50">`..</text></g><g><title>`0x7FFD6B171227 (2,228 samples, 0.69%)</title><rect x="85.3054%" y="53" width="0.6884%" height="15" fill="rgb(251,118,11)" fg:x="276084" fg:w="2228"/><text x="85.5554%" y="63.50"></text></g><g><title>`0x7FFD6B17122A (78 samples, 0.02%)</title><rect x="85.9938%" y="53" width="0.0241%" height="15" fill="rgb(217,147,25)" fg:x="278312" fg:w="78"/><text x="86.2438%" y="63.50"></text></g><g><title>`0x7FFD6B17122D (499 samples, 0.15%)</title><rect x="86.0179%" y="53" width="0.1542%" height="15" fill="rgb(247,81,37)" fg:x="278390" fg:w="499"/><text x="86.2679%" y="63.50"></text></g><g><title>`0x7FFD6B171232 (3,428 samples, 1.06%)</title><rect x="86.1721%" y="53" width="1.0592%" height="15" fill="rgb(209,12,38)" fg:x="278889" fg:w="3428"/><text x="86.4221%" y="63.50"></text></g><g><title>`0x7FFD6B171235 (597 samples, 0.18%)</title><rect x="87.2313%" y="53" width="0.1845%" height="15" fill="rgb(227,1,9)" fg:x="282317" fg:w="597"/><text x="87.4813%" y="63.50"></text></g><g><title>`0x7FFD6B171239 (3,987 samples, 1.23%)</title><rect x="87.4157%" y="53" width="1.2319%" height="15" fill="rgb(248,47,43)" fg:x="282914" fg:w="3987"/><text x="87.6657%" y="63.50"></text></g><g><title>`0x7FFD6B17123B (1,718 samples, 0.53%)</title><rect x="88.6476%" y="53" width="0.5308%" height="15" fill="rgb(221,10,30)" fg:x="286901" fg:w="1718"/><text x="88.8976%" y="63.50"></text></g><g><title>`0x7FFD6B171240 (1,829 samples, 0.57%)</title><rect x="89.1785%" y="53" width="0.5651%" height="15" fill="rgb(210,229,1)" fg:x="288619" fg:w="1829"/><text x="89.4285%" y="63.50"></text></g><g><title>`0x7FFD6B171242 (9,245 samples, 2.86%)</title><rect x="89.7436%" y="53" width="2.8566%" height="15" fill="rgb(222,148,37)" fg:x="290448" fg:w="9245"/><text x="89.9936%" y="63.50">`0..</text></g><g><title>`0x7FFD6B171247 (6,358 samples, 1.96%)</title><rect x="92.6005%" y="53" width="1.9645%" height="15" fill="rgb(234,67,33)" fg:x="299694" fg:w="6358"/><text x="92.8505%" y="63.50">`..</text></g><g><title>`0x7FFD6B17124A (478 samples, 0.15%)</title><rect x="94.5650%" y="53" width="0.1477%" height="15" fill="rgb(247,98,35)" fg:x="306052" fg:w="478"/><text x="94.8150%" y="63.50"></text></g><g><title>`0x7FFD6B17124F (202 samples, 0.06%)</title><rect x="94.7127%" y="53" width="0.0624%" height="15" fill="rgb(247,138,52)" fg:x="306530" fg:w="202"/><text x="94.9627%" y="63.50"></text></g><g><title>`0x7FFD6B171252 (61 samples, 0.02%)</title><rect x="94.7751%" y="53" width="0.0188%" height="15" fill="rgb(213,79,30)" fg:x="306732" fg:w="61"/><text x="95.0251%" y="63.50"></text></g><g><title>`0x7FFD6B17125A (293 samples, 0.09%)</title><rect x="94.7939%" y="53" width="0.0905%" height="15" fill="rgb(246,177,23)" fg:x="306793" fg:w="293"/><text x="95.0439%" y="63.50"></text></g><g><title>`0x7FFD6B17125E (34 samples, 0.01%)</title><rect x="94.8845%" y="53" width="0.0105%" height="15" fill="rgb(230,62,27)" fg:x="307086" fg:w="34"/><text x="95.1345%" y="63.50"></text></g><g><title>`0x7FFD6B171297 (316 samples, 0.10%)</title><rect x="94.8950%" y="53" width="0.0976%" height="15" fill="rgb(216,154,8)" fg:x="307120" fg:w="316"/><text x="95.1450%" y="63.50"></text></g><g><title>`0x7FFD6B17129E (227 samples, 0.07%)</title><rect x="94.9929%" y="53" width="0.0701%" height="15" fill="rgb(244,35,45)" fg:x="307437" fg:w="227"/><text x="95.2429%" y="63.50"></text></g><g><title>`0x7FFD6B1712A0 (282 samples, 0.09%)</title><rect x="95.0631%" y="53" width="0.0871%" height="15" fill="rgb(251,115,12)" fg:x="307664" fg:w="282"/><text x="95.3131%" y="63.50"></text></g><g><title>`0x7FFD6B1712A3 (610 samples, 0.19%)</title><rect x="95.1502%" y="53" width="0.1885%" height="15" fill="rgb(240,54,50)" fg:x="307946" fg:w="610"/><text x="95.4002%" y="63.50"></text></g><g><title>`0x7FFD6B1712A9 (783 samples, 0.24%)</title><rect x="95.3393%" y="53" width="0.2419%" height="15" fill="rgb(233,84,52)" fg:x="308558" fg:w="783"/><text x="95.5893%" y="63.50"></text></g><g><title>`0x7FFD6B1712B2 (33 samples, 0.01%)</title><rect x="95.5812%" y="53" width="0.0102%" height="15" fill="rgb(207,117,47)" fg:x="309341" fg:w="33"/><text x="95.8312%" y="63.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::impl$7::find::closure$0 (73,350 samples, 22.66%)</title><rect x="73.6131%" y="165" width="22.6639%" height="15" fill="rgb(249,43,39)" fg:x="238243" fg:w="73350"/><text x="73.8631%" y="175.50">rust-1brc.exe`hashbrown::raw::impl$7..</text></g><g><title>rust-1brc.exe`hashbrown::rustc_entry::impl$0::rustc_entry::closure$0 (48,340 samples, 14.94%)</title><rect x="81.3408%" y="149" width="14.9363%" height="15" fill="rgb(209,38,44)" fg:x="263253" fg:w="48340"/><text x="81.5908%" y="159.50">rust-1brc.exe`hashbrown..</text></g><g><title>rust-1brc.exe`core::cmp::impls::impl$9::eq (48,340 samples, 14.94%)</title><rect x="81.3408%" y="133" width="14.9363%" height="15" fill="rgb(236,212,23)" fg:x="263253" fg:w="48340"/><text x="81.5908%" y="143.50">rust-1brc.exe`core::cmp..</text></g><g><title>rust-1brc.exe`core::str::traits::impl$1::eq (48,340 samples, 14.94%)</title><rect x="81.3408%" y="117" width="14.9363%" height="15" fill="rgb(242,79,21)" fg:x="263253" fg:w="48340"/><text x="81.5908%" y="127.50">rust-1brc.exe`core::str..</text></g><g><title>rust-1brc.exe`core::cmp::impls::impl$9::eq (48,340 samples, 14.94%)</title><rect x="81.3408%" y="101" width="14.9363%" height="15" fill="rgb(211,96,35)" fg:x="263253" fg:w="48340"/><text x="81.5908%" y="111.50">rust-1brc.exe`core::cmp..</text></g><g><title>rust-1brc.exe`core::slice::cmp::impl$0::eq (48,340 samples, 14.94%)</title><rect x="81.3408%" y="85" width="14.9363%" height="15" fill="rgb(253,215,40)" fg:x="263253" fg:w="48340"/><text x="81.5908%" y="95.50">rust-1brc.exe`core::sli..</text></g><g><title>rust-1brc.exe`core::slice::cmp::impl$5::equal (48,340 samples, 14.94%)</title><rect x="81.3408%" y="69" width="14.9363%" height="15" fill="rgb(211,81,21)" fg:x="263253" fg:w="48340"/><text x="81.5908%" y="79.50">rust-1brc.exe`core::sli..</text></g><g><title>rust-1brc.exe`memcmp (2,216 samples, 0.68%)</title><rect x="95.5924%" y="53" width="0.6847%" height="15" fill="rgb(208,190,38)" fg:x="309377" fg:w="2216"/><text x="95.8424%" y="63.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::load (1,509 samples, 0.47%)</title><rect x="96.2771%" y="165" width="0.4663%" height="15" fill="rgb(235,213,38)" fg:x="311593" fg:w="1509"/><text x="96.5271%" y="175.50"></text></g><g><title>rust-1brc.exe`core::core_arch::x86::sse2::_mm_loadu_si128 (1,509 samples, 0.47%)</title><rect x="96.2771%" y="149" width="0.4663%" height="15" fill="rgb(237,122,38)" fg:x="311593" fg:w="1509"/><text x="96.5271%" y="159.50"></text></g><g><title>rust-1brc.exe`core::intrinsics::copy_nonoverlapping (1,509 samples, 0.47%)</title><rect x="96.2771%" y="133" width="0.4663%" height="15" fill="rgb(244,218,35)" fg:x="311593" fg:w="1509"/><text x="96.5271%" y="143.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::match_byte (8,308 samples, 2.57%)</title><rect x="96.7433%" y="165" width="2.5670%" height="15" fill="rgb(240,68,47)" fg:x="313102" fg:w="8308"/><text x="96.9933%" y="175.50">ru..</text></g><g><title>rust-1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (8,308 samples, 2.57%)</title><rect x="96.7433%" y="149" width="2.5670%" height="15" fill="rgb(210,16,53)" fg:x="313102" fg:w="8308"/><text x="96.9933%" y="159.50">ru..</text></g><g><title>rust-1brc.exe`std::collections::hash::map::HashMap::entry (107,006 samples, 33.06%)</title><rect x="66.2964%" y="229" width="33.0631%" height="15" fill="rgb(235,124,12)" fg:x="214563" fg:w="107006"/><text x="66.5464%" y="239.50">rust-1brc.exe`std::collections::hash::map::HashMap::en..</text></g><g><title>rust-1brc.exe`hashbrown::map::HashMap::rustc_entry (107,006 samples, 33.06%)</title><rect x="66.2964%" y="213" width="33.0631%" height="15" fill="rgb(224,169,11)" fg:x="214563" fg:w="107006"/><text x="66.5464%" y="223.50">rust-1brc.exe`hashbrown::map::HashMap::rustc_entry</text></g><g><title>rust-1brc.exe`hashbrown::raw::RawTable::find (97,885 samples, 30.24%)</title><rect x="69.1146%" y="197" width="30.2448%" height="15" fill="rgb(250,166,2)" fg:x="223684" fg:w="97885"/><text x="69.3646%" y="207.50">rust-1brc.exe`hashbrown::raw::RawTable::find</text></g><g><title>rust-1brc.exe`hashbrown::raw::RawTableInner::find_inner (97,133 samples, 30.01%)</title><rect x="69.3470%" y="181" width="30.0125%" height="15" fill="rgb(242,216,29)" fg:x="224436" fg:w="97133"/><text x="69.5970%" y="191.50">rust-1brc.exe`hashbrown::raw::RawTableInner::fin..</text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::match_empty (159 samples, 0.05%)</title><rect x="99.3103%" y="165" width="0.0491%" height="15" fill="rgb(230,116,27)" fg:x="321410" fg:w="159"/><text x="99.5603%" y="175.50"></text></g><g><title>rust-1brc.exe`hashbrown::raw::sse2::Group::match_byte (159 samples, 0.05%)</title><rect x="99.3103%" y="149" width="0.0491%" height="15" fill="rgb(228,99,48)" fg:x="321410" fg:w="159"/><text x="99.5603%" y="159.50"></text></g><g><title>rust-1brc.exe`core::core_arch::x86::sse2::_mm_movemask_epi8 (159 samples, 0.05%)</title><rect x="99.3103%" y="133" width="0.0491%" height="15" fill="rgb(253,11,6)" fg:x="321410" fg:w="159"/><text x="99.5603%" y="143.50"></text></g><g><title>rust-1brc.exe`std::collections::hash::map::OccupiedEntry::into_mut (2,058 samples, 0.64%)</title><rect x="99.3595%" y="229" width="0.6359%" height="15" fill="rgb(247,143,39)" fg:x="321569" fg:w="2058"/><text x="99.6095%" y="239.50"></text></g><g><title>rust-1brc.exe`hashbrown::rustc_entry::RustcOccupiedEntry::into_mut (2,058 samples, 0.64%)</title><rect x="99.3595%" y="213" width="0.6359%" height="15" fill="rgb(236,97,10)" fg:x="321569" fg:w="2058"/><text x="99.6095%" y="223.50"></text></g><g><title>`0x7FFD8C86AA58 (323,628 samples, 100.00%)</title><rect x="0.0003%" y="341" width="99.9957%" height="15" fill="rgb(233,208,19)" fg:x="1" fg:w="323628"/><text x="0.2503%" y="351.50">`0x7FFD8C86AA58</text></g><g><title>`0x7FFD8AD2257D (323,628 samples, 100.00%)</title><rect x="0.0003%" y="325" width="99.9957%" height="15" fill="rgb(216,164,2)" fg:x="1" fg:w="323628"/><text x="0.2503%" y="335.50">`0x7FFD8AD2257D</text></g><g><title>rust-1brc.exe`__scrt_common_main_seh() (323,626 samples, 100.00%)</title><rect x="0.0009%" y="309" width="99.9951%" height="15" fill="rgb(220,129,5)" fg:x="3" fg:w="323626"/><text x="0.2509%" y="319.50">rust-1brc.exe`__scrt_common_main_seh()</text></g><g><title>rust-1brc.exe`invoke_main() (323,619 samples, 99.99%)</title><rect x="0.0031%" y="293" width="99.9929%" height="15" fill="rgb(242,17,10)" fg:x="10" fg:w="323619"/><text x="0.2531%" y="303.50">rust-1brc.exe`invoke_main()</text></g><g><title>rust-1brc.exe`main (323,619 samples, 99.99%)</title><rect x="0.0031%" y="277" width="99.9929%" height="15" fill="rgb(242,107,0)" fg:x="10" fg:w="323619"/><text x="0.2531%" y="287.50">rust-1brc.exe`main</text></g><g><title>rust-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt; (323,618 samples, 99.99%)</title><rect x="0.0034%" y="261" width="99.9926%" height="15" fill="rgb(251,28,31)" fg:x="11" fg:w="323618"/><text x="0.2534%" y="271.50">rust-1brc.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;</text></g><g><title>rust-1brc.exe`rust_1brc::main (323,618 samples, 99.99%)</title><rect x="0.0034%" y="245" width="99.9926%" height="15" fill="rgb(233,223,10)" fg:x="11" fg:w="323618"/><text x="0.2534%" y="255.50">rust-1brc.exe`rust_1brc::main</text></g><g><title>all (323,642 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="323642"/><text x="0.2500%" y="367.50"></text></g></svg></svg>